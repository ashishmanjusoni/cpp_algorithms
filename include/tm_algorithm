#ifndef __$__TM_CPP_ALGORITHMS__2025_
#define __$__TM_CPP_ALGORITHMS__2025_
#include<iostream>
#include<iterator>
namespace algo
{

/**
Sort the elements in the reage [begin,end) in accending order
The elements are compared using `operator<`
`RandomAccessIterator [begin,end)` is an inital and last position of the sequence to be sorted.
begin will be considered but last last will not be.
**/

template<class RandomAccessIterator>
void sort(RandomAccessIterator begin, RandomAccessIterator end)
{
RandomAccessIterator y,j,data;
for(y=begin+1;y!=end;y++)
{
typename std::iterator_traits<RandomAccessIterator>::value_type key= *y;
data=y;
for(j=y-1;j>=begin && *j>key;j--) *(j+1)=*j;
*(j+1)=key;
}
}

/**
Sort the elements in the range [begin,end)
The elements are compared using `comp`
`RandomAccessIterator [begin,end)` is an inital and last position of the sequence to be sorted.
begin will be considered but last last will not be.
`comp` is a binary function which accepts two elements in the range as argurment
make comparision between them and return a bool value
`bool (*)(element1,element2)`
**/

template<class RandomAccessIterator,class Compare>
void sort(RandomAccessIterator begin, RandomAccessIterator end, Compare comp)
{
RandomAccessIterator y,j,data;
for(y=begin+1;y!=end;y++)
{
typename std::iterator_traits<RandomAccessIterator>::value_type key=*y;
data=y;
for(j=y-1;j>=begin && comp(*j,key);j--) *(j+1)=*j;
*(j+1)=key;
}
}

/**
Reverse the order of the elements in the range [begin,end)
Through the function call `iter_swap` which swaps two iterator elements.
**/

template<class BidirectionalIterator>
void reverse(BidirectionalIterator begin, BidirectionalIterator end)
{
int e;
BidirectionalIterator a,b;
typename std::iterator_traits<BidirectionalIterator>::difference_type f=std::distance(begin,end);
for(e=0,a=begin,b=end-1;e<f;e++,f--,a++,b--) std::iter_swap(a,b);
}

template<class ForwardIterator>
ForwardIterator min_element(ForwardIterator begin, ForwardIterator end)
{
ForwardIterator smallest;
smallest=begin;
while(++begin!=end) if(*smallest>*begin) smallest=begin;
return smallest;
}

template<class ForwardIterator,class Compare>
ForwardIterator min_element(ForwardIterator begin, ForwardIterator end,Compare comp)
{
ForwardIterator smallest;
smallest=begin;
while(++begin!=end) if(comp(*smallest,*begin)>0) smallest=begin;
return smallest;
}

template<class ForwardIterator>
ForwardIterator max_element(ForwardIterator begin, ForwardIterator end)
{
ForwardIterator largest;
largest=begin;
while(++begin!=end) if(*largest<*begin) largest=begin;
return largest;
}

template<class ForwardIterator,class Compare>
ForwardIterator max_element(ForwardIterator begin, ForwardIterator end,Compare comp)
{
ForwardIterator largest;
largest=begin;
while(++begin!=end) if(comp(*largest,*begin)<0) largest=begin;
return largest;
}

template<class InputIterator,class T>
InputIterator find(InputIterator first,InputIterator last,const T &val)
{
while(++first!=last) if(*first==val) return first;
return last;
}

template<class InputIt,class T>
InputIt lower_bound(InputIt first,InputIt last,T val)
{
InputIt it,begin;
begin=first;
typename std::iterator_traits<InputIt>::difference_type count,mid;
count=std::distance(first,last);
while(count>0)
{
it=begin;
mid=count/2;
std::advance(it,mid);
if(*it<val)
{
begin=++it;
count-=(mid+1);
}
else count=mid;
}
return begin;
}

template<class InputIt,class T,class Compare>
InputIt lower_bound(InputIt first,InputIt last,T val,Compare comp)
{
InputIt it,begin;
begin=first;
typename std::iterator::traits<InputIt>::difference_type count,mid;
count=std::distance(first,last);
while(count>0)
{
it=begin;
mid=count/2;
if(comp(*it,val)<0)
{
begin=++it;
count-=mid+1;
}
else count=mid;
}
return begin;
}

template<class InputIt,class T>
InputIt upper_bound(InputIt first,InputIt last ,T val)
{
InputIt it,begin;
begin=first;
typename std::iterator_traits<InputIt>::difference_type count,mid;
count=std::distance(first,last);
while(count>0)
{
it=begin;
mid=count/2;
std::advance(it,mid);
if(!(val<*it))
{
begin=++it;
count-=mid+1;
}
else count=mid;
}
return begin;
}

template<class InputIt,class T, Compare comp>
InputIt upper_bound(InputIt first,InputIt last,T val,Compare comp)
{
InputIt it,begin;
begin=first;
typename std::iterator::traits<InputIt>::difference_type count,mid;
count=std::distance(first,last);
while(count>0)
{
it=begin;
mid=count/2;
std::advance(it,mid);
if(!(comp(val,*it)<0))
{
begin=++it;
count-=mid+1;
}
else count=mid;
}
return begin;
}

template<class InputIt,class T>
bool binary_search(InputIt first,InputIt last,T val)
{
InputIt it=lower_bound(first,last);
return (it!=last) && !(val<*it);
}

template<class InputIt,class T,class Compare>
bool binary_search(InputIt first,InputIt last,T val,Compare comp)
{
Input it=lower_bound(first,last,comp);
return (it!=last) && !(comp(val,*it)<0);
}

template<class InputIt>
typename std::iterator_traits<InputIt>::difference_type count(InputIt first,InputIt last)
{
typename std::iterator_traits<InputIt>::difference_type size=0;
while(first!=last)
{
size++;
++first;
}
return size;
}

}
#endif
